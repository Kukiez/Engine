#pragma once

#include <GL/glew.h>

enum class TextureFormat {
    RGBA = GL_RGBA,
    RGB = GL_RGB,
    RG = GL_RG,
    R = GL_RED,
    RGBA4 = GL_RGBA4,
    RGBA8 = GL_RGBA8,
    RGB8 = GL_RGB8,
    RG8 = GL_RG8,
    R8 = GL_R8,
    RGBA16F = GL_RGBA16F,
    RGB16F = GL_RGB16F,
    RG16F = GL_RG16F,
    R16F = GL_R16F,
    RGBA32F = GL_RGBA32F,
    RGB32F = GL_RGB32F,
    RG32F = GL_RG32F,
    R32F = GL_R32F,
    RGBA8_SNORM = GL_RGBA8_SNORM,
    RGB8_SNORM = GL_RGB8_SNORM,
    RGBA16 = GL_RGBA16,
    RGB16 = GL_RGB16,
};

enum class TextureMinFilter {
    NEAREST = GL_NEAREST,
    LINEAR = GL_LINEAR,
    NEAREST_MIPMAP_NEAREST = GL_NEAREST_MIPMAP_NEAREST,
    NEAREST_MIPMAP_LINEAR  = GL_NEAREST_MIPMAP_LINEAR,
    LINEAR_MIPMAP_NEAREST  = GL_LINEAR_MIPMAP_NEAREST,
    LINEAR_MIPMAP_LINEAR   = GL_LINEAR_MIPMAP_LINEAR
};

enum class TextureMagFilter {
    NEAREST = GL_NEAREST,
    LINEAR  = GL_LINEAR
};

enum class TextureWrap {
    REPEAT = GL_REPEAT,
    MIRRORED_REPEAT = GL_MIRRORED_REPEAT,
    EDGE_CLAMP = GL_CLAMP_TO_EDGE,
    BORDER_CLAMP = GL_CLAMP_TO_BORDER,
};


enum class TextureCompare {
    LESS = GL_LESS,
    LESS_OR_EQUAL = GL_LEQUAL,
    EQUAL = GL_EQUAL,
    GREATER = GL_GREATER,
    GREATER_OR_EQUAL = GL_GEQUAL,
    NOT_EQUAL = GL_NOTEQUAL,
    ALWAYS = GL_ALWAYS
};



enum class TextureTarget : unsigned {
    TEXTURE_1D = GL_TEXTURE_1D,
    TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY,
    TEXTURE_2D = GL_TEXTURE_2D,
    TEXTURE_ARRAY_2D = GL_TEXTURE_2D_ARRAY,
    CUBEMAP = GL_TEXTURE_CUBE_MAP,
    TEXTURE_3D = GL_TEXTURE_3D
};
